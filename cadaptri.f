        implicit double precision (a-h,o-z)
        dimension verts(2,3),vals(1000),a(2,3)
        double complex val,sum
        dimension xs(100 000),ys(100 000),whts(100 000)
        external funtest1
c
        verts(1,1) = 0.1d0
        verts(2,1) = 0
c
        verts(1,2) = 1.0d0
        verts(2,2) = 0
c
        verts(1,3) = 0
        verts(2,3) = 1.0d0
c
        call mach_zero(eps0)
        eps=eps0*100
        eps = 1.0d-30
c
        call cadaptri(ier,eps,verts,funtest1,par1,par2,par3,par4,
     1    par5,par6,par7,par8,val,nquad)
c
        if (ier .ne. 0) then
        call prinf("after cadaptri, ier = *",ier,1)
        stop
        endif
c
        print *,"ier = ",ier
        print *,"val = ",val
        print *,"nquad = ",nquad
c
        maxquad = 100 000
c
        call cadaptri2(ier,eps,verts,funtest1,par1,par2,par3,par4,
     1    par5,par6,par7,par8,maxquad,nquad,xs,ys,whts)
c
        if (ier .ne. 0) then
        call prinf("after cadaptri2, ier = *",ier,1)
        stop
        endif
c
        sum = 0
        do 1000 i=1,nquad
        x = xs(i)
        y = ys(i)
        wht = whts(i)
        call funtest1(x,y,par1,par2,par3,par4,par5,par6,par7,par8,val)
        sum = sum + wht * val
 1000 continue
c
        print *,sum
        end
c        
c
c
        subroutine funtest1(x,y,par1,par2,par3,par4,par5,par6,par7,
     -    par8,val)
        implicit double precision (a-h,o-z)
        double complex val,ima
        data ima / (0.0d0,1.0d0) /
c
        r   = sqrt(x**2+y**2)
        t   = atan2(y,x)
c        val = cos(27*t)+x*y**2*sin(t**2) + ima/r
c
        val = cos(t)+ima/r*sin(3*t)
c
        end


cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c       This is the end of the debugging code and beginning of the
c       adaptive integration code proper.
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c       The following subroutines are user-callable:
c
c   cadaptri - adaptively integrate a complex-valued function supplied 
c       by the user via an external subroutine over a specified triangle 
c       in the plane 
c
c   cadaptri2 - adaptively construct a quadrature rule, which is 
c       returned to the user, for a user-specified function
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


        subroutine cadaptri(ier,eps,verts,funuser,par1,par2,par3,par4,
     1    par5,par6,par7,par8,val,nquad)
        implicit double precision (a-h,o-z)
        dimension verts(2,3),stack(9,10 000)
        double complex val,val0,ima,val1,val2,val3,val4
        data ima / (0.0d0,1.0d0) /
        external funuser
c
c       Adaptively integrate a function supplied by the user via an 
c       external subroutine over a specified triangle.  
c
c       This subroutine uses a 60 point quadrature which integrates
c       16th order polynomials on the simplex.  It is accurate to
c       approximately 30 digits.
c
c                           Input Parameters:
c
c   eps - precision for the routine
c   verts - a (2,3) array each column of which supplies the coordinates
c       of one vertex of the triangle which constitutes the integration
c       domain
c
c   funuser - user-supplied external subroutine with calling syntax
c
c       subroutine funuser(x,y,par1,par2,par3,par4,par5,par6,par7,par8,val)
c
c       Return the value of the function to integrate at the point
c       (x,y) in the parameter val.
c
c   par? - arbitrarily-typed user-supplied parameters
c
c                          Output Parameters:
c
c   ier - an error return code;
c       ier = 0    indicates success
c       ier = 4    means that stack was exhausted before convergence 
c                  was ovtained
c       ier = 16   means that the maximum recursion depth was exceeded
c                  before convergence was obtained
c
c   val - value of the integral
c   nquad - total number of quadrature nodes necessary to obtain the
c       specified accuracy
c
        ier   = 0
        val   = 0
        nquad = 0
c
c       Set algorithm parameters.
c
        maxstack = 10 000
        maxdepth = 150
c
c       Initialize the stack.
c
        istack=1
c
        x1 = verts(1,1)
        y1 = verts(2,1)
        x2 = verts(1,2)
        y2 = verts(2,2)
        x3 = verts(1,3)
        y3 = verts(2,3)
c
        stack(1,1)=x1
        stack(2,1)=y1
        stack(3,1)=x2
        stack(4,1)=y2
        stack(5,1)=x3
        stack(6,1)=y3
        stack(7,istack)=0
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val0)
        stack(8,istack)=real(val0)
        stack(9,istack)=imag(val0)
c
 1000 continue
c
c       Pop an entry off the stack.
c
        if (istack .eq. 0) goto 2000
c
        x1 = stack(1,istack)
        y1 = stack(2,istack)
        x2 = stack(3,istack)
        y2 = stack(4,istack)
        x3 = stack(5,istack)
        y3 = stack(6,istack)
c
        idepth0 = stack(7,istack)
        val0    = stack(8,istack)+ima*stack(9,istack)
        istack=istack-1
c
        if (idepth0 .gt. maxdepth) then
        ier=16
        return
        endif
c
c       Subdivide the triangle.
c
        u1 = (x1+x2)/2
        v1 = (y1+y2)/2
        u2 = (x1+x3)/2
        v2 = (y1+y3)/2
        u3 = (x2+x3)/2
        v3 = (y2+y3)/2
c
        if (istack+4 .gt. maxstack) then
        ier=4
        return
        endif
c
        istack=istack+1
        stack(1,istack)=x1
        stack(2,istack)=y1
        stack(3,istack)=u1
        stack(4,istack)=v1
        stack(5,istack)=u2
        stack(6,istack)=v2
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val1)
c
        stack(8,istack)=real(val1)
        stack(9,istack)=imag(val1)
c
        istack=istack+1
        stack(1,istack)=u1
        stack(2,istack)=v1
        stack(3,istack)=u2
        stack(4,istack)=v2
        stack(5,istack)=u3
        stack(6,istack)=v3
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val2)
c
        stack(8,istack)=real(val2)
        stack(9,istack)=imag(val2)
c
        istack=istack+1
        stack(1,istack)=u1
        stack(2,istack)=v1
        stack(3,istack)=x2
        stack(4,istack)=y2
        stack(5,istack)=u3
        stack(6,istack)=v3
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val3)
c
        stack(8,istack)=real(val3)
        stack(9,istack)=imag(val3)
c
        istack=istack+1
        stack(1,istack)=u2
        stack(2,istack)=v2
        stack(3,istack)=x3
        stack(4,istack)=y3
        stack(5,istack)=u3
        stack(6,istack)=v3
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val4)
c
        stack(8,istack)=real(val4)
        stack(9,istack)=imag(val4)
c
        errmax = abs(val1+val2+val3+val4-val0)
c        
 1100 continue
c
c       Accept the parent triangle.
c
        if (errmax .lt. eps) then
        nquad=nquad+79
        val=val+val0
        istack=istack-4
        endif
c
        goto 1000
 2000 continue
        end
c
c
c
        subroutine cadaptri_oneint(verts,funuser,par1,par2,par3,par4,
     -    par5,par6,par7,par8,sum)
        implicit double precision (a-h,o-z)
        double complex sum,val
c
c       Use a 20th order quadrature on the simplex to integrate the
c       user-supplied function over an arbitrary triangle.
c
        dimension verts(2,3)
        parameter ( nquad  =  82 , norder =  20)
        dimension xs( 82)
        dimension ys( 82)
        dimension whts( 82)
        data xs / 
     -    0.599606254286902014109006057460420108D+00,
     -    0.194361431608043340268349328753621816D-01,
     -    0.241494180881714895456504665896244100D+00,
     -    0.105509674807245944676658135392812692D+00,
     -    0.616055824663626995034887770249250644D-02,
     -    0.464919870130005077700842299832589593D-01,
     -    0.304200429423964880673975450567876394D+00,
     -    0.583539419677400034344922795152024729D+00,
     -    0.175270214114002368468762357805489194D+00,
     -    0.598301244328762033762286773546545691D+00,
     -    0.166965679734103225011556409365210418D+00,
     -    0.889166641175858205338161795170443806D+00,
     -    0.755863367197887113861132247564378201D-01,
     -    0.295264632916368315962285935928740971D-01,
     -    0.256888715492714935813229448133238334D-01,
     -    0.107074199802325561771243809493934968D+00,
     -    0.549062540336734650920299503296574530D-01,
     -    0.920149373366625529768067392435410463D+00,
     -    0.201946666558915812782665919173465169D-02,
     -    0.778040596575308641325987844081927358D+00,
     -    0.244800385519035441406502379722475741D+00,
     -    0.883518790025362975895709357978630189D+00,
     -    0.689049518913119026641472757441696058D-02,
     -    0.371361300475613755221503219149097066D+00,
     -    0.918971376905630671473266495113308531D+00,
     -    0.981666418328583582563905133390323568D-01,
     -    0.221979496938003647108180997031780848D-02,
     -    0.222711270544954412539119333211675904D-01,
     -    0.347613970652109371719736681742365287D-01,
     -    0.112170883522039017722165322362894684D-01,
     -    0.234784127644583398189195859923900450D-01,
     -    0.949564842458820098459969438578239178D-03,
     -    0.960158278274404707736460527560270547D-01,
     -    0.814128691695641782794660791924700011D+00,
     -    0.828064016989716198721254147763142082D+00,
     -    0.419484246902258813258366631542961097D-01,
     -    0.544882920269563083968098834369289140D-01,
     -    0.824689207333774148899588242873822903D-02,
     -    0.104033014516939923924853366950682230D+00,
     -    0.972983702139908917115857088461480568D+00,
     -    0.664432078440786655469633668788006996D-02,
     -    0.899789627478252441053953757247021805D-01,
     -    0.386240505789938313063439442612861920D+00,
     -    0.322888511686564386223573674100287206D+00,
     -    0.415046110493545954501464973838089405D+00,
     -    0.216044708523946076434291733787020999D+00,
     -    0.511004305067262966553686621080370891D+00,
     -    0.665353765561377659082315362369084896D-01,
     -    0.578587620304571958769192311237392943D+00,
     -    0.463342607045196117401383463312834265D+00,
     -    0.651799224970254504110336808720337570D+00,
     -    0.617032001973026269673445638841257729D+00,
     -    0.556943132502515425080187206976310713D+00,
     -    0.195919045804594926235373898666885154D+00,
     -    0.164405131051815576406503521719098033D-01,
     -    0.464176573225095527057592116048231138D-02,
     -    0.759524858064799218110120059010316207D+00,
     -    0.726362435436986650118324226386642268D+00,
     -    0.322118235017598678724560446291703289D+00,
     -    0.445182839046954605878580016412644353D+00,
     -    0.123882678015329113812832110156345145D+00,
     -    0.697834066279718867421958894765572399D+00,
     -    0.127023396474346065188903741267591642D+00,
     -    0.718424844780529689652975879516799292D+00,
     -    0.161361926482163036281137841995082847D+00,
     -    0.272502731185176935181405853847768918D+00,
     -    0.468362831926967476927009451773859465D+00,
     -    0.473150257223928440406970902117165149D-01,
     -    0.836800892341130580851642520697442044D+00,
     -    0.121058861284957150257569482125406357D+00,
     -    0.178967763622164066155815440796739068D+00,
     -    0.975768978323607300548321269209258902D+00,
     -    0.682892491046321208530596541259857125D+00,
     -    0.242288416685756862302201013292390492D+00,
     -    0.529896775875208249057459716196417768D+00,
     -    0.431016621433818874634506956062581142D+00,
     -    0.461615405150816451748591656678411982D+00,
     -    0.205333529488513877575038520865148198D+00,
     -    0.219147685021828581752734597261080584D+00,
     -    0.305416068178868934753979849473602536D+00,
     -    0.336017662662626571437617267625200890D+00,
     -    0.328151194781557038836205590227649413D+00 /
        data ys / 
     -    0.246987250173183251591138139477247798D+00,
     -    0.637312973821099579220227582131754075D-01,
     -    0.165142890700120745426508545494047232D+00,
     -    0.848376935259422925694101036268539135D+00,
     -    0.101965125100204735479076289038317096D+00,
     -    0.285983198603166177522138931021523206D-01,
     -    0.109413117368647462527320845763732087D+00,
     -    0.307134366751819408990200650541040621D+00,
     -    0.235355336844576831438451586070641493D+00,
     -    0.185297548180086285061054262292805064D+00,
     -    0.811213746960471744921999120531002408D+00,
     -    0.110670986160045981069582851593283731D+00,
     -    0.828345313458428657922598508890632567D+00,
     -    0.810351065753387201376519827689730295D+00,
     -    0.167058285442311206408901321167058032D+00,
     -    0.892587772725211605200297350607319113D+00,
     -    0.925454999013020201784097793639897818D+00,
     -    0.597014897218390946418003468191696236D-01,
     -    0.219163859881526873713206099082357486D+00,
     -    0.213763671275583299231053887420053619D+00,
     -    0.753150431116658616132792091161023253D+00,
     -    0.321115199393785175243630896076941395D-02,
     -    0.346758451205152397308745212355778136D+00,
     -    0.619218741371277740367491011530752235D+00,
     -    0.221900019516216029395412399844223823D-01,
     -    0.320153160816791631616085315394201456D+00,
     -    0.968370945816610677856085378858127161D+00,
     -    0.912440100995654365612943104784970207D+00,
     -    0.276556378666680441105612696672019590D+00,
     -    0.613580172297473706583535588190947352D+00,
     -    0.570081194742925987853925431231622644D-03,
     -    0.874501329112400145894361691390429597D+00,
     -    0.735992786725095788055450857159245106D-02,
     -    0.299444377973357339824377031573824829D-01,
     -    0.137802553310600277203899176441726133D+00,
     -    0.413070925307972707763998082902346306D+00,
     -    0.537091092433573993197436123975467876D+00,
     -    0.483198266004187310146441724285615637D+00,
     -    0.716399477326731899606833847556852893D+00,
     -    0.225628395805686103220967260488490456D-02,
     -    0.745026931602766088487283811608741602D+00,
     -    0.194076217743391325103738992138667124D+00,
     -    0.470058532078494498557486568796098284D-01,
     -    0.217891649100615843324144309464199784D+00,
     -    0.536016253972298658990994808074045452D+00,
     -    0.328853733036855950951573157379383997D+00,
     -    0.480043144437644044526640668896520242D+00,
     -    0.978471605387780727936819066192683246D-01,
     -    0.104949514941569796291171105869198093D+00,
     -    0.319332189203961982050852138653107741D+00,
     -    0.338706364028602912351769567095295020D+00,
     -    0.828052061183471008386243342749602213D-02,
     -    0.395348230414984582875012957356595706D+00,
     -    0.992505831376731943699660034899233491D-02,
     -    0.977751230467919281203921331514757260D+00,
     -    0.215123967692872100140058303704414848D-01,
     -    0.496803434405404947011297114964753274D-02,
     -    0.168713665705801034116930996608111115D+00,
     -    0.101025321565154691966832441423959986D-01,
     -    0.434128994075065783661137425691943462D+00,
     -    0.433859977930181487648663514618569764D+00,
     -    0.254795840077101198347848937745977028D+00,
     -    0.463701673755473508426021906786865280D-01,
     -    0.951388904341828422176806244828418685D-01,
     -    0.118111308450451495262621877259131412D+00,
     -    0.689174710872979420268772875156925305D+00,
     -    0.818453211675707958327895639337370961D-02,
     -    0.680430239926720088293259434670641818D+00,
     -    0.763887204880219517254252694653643608D-01,
     -    0.577277027177800601329890945992461294D+00,
     -    0.726962632595002744662831667159526419D+00,
     -    0.192435377093286902406842067822604071D-01,
     -    0.387799579209672310960022906050334021D-01,
     -    0.523072289000852730444121576035645264D-01,
     -    0.450105276132100864489385958772913264D-01,
     -    0.118080243442109657443524048151520650D+00,
     -    0.209061172173192141144067286297244125D+00,
     -    0.600559998438305989916338402107515999D+00,
     -    0.461672327465312156951288656844981738D+00,
     -    0.586078739311138216495010329907431162D+00,
     -    0.333593303633145814670511687166144857D+00,
     -    0.462078429713072100173704636848334120D+00 /
        data whts /
     -    0.524495548583970863143784235992340113D-02,
     -    0.164811091334793458733876571477532741D-02,
     -    0.728860453034198792713590629202168135D-02,
     -    0.339588878203591086832605977057112252D-02,
     -    0.129261249661162283851644640012514470D-02,
     -    0.249171990301011677839584142895364983D-02,
     -    0.873737709104630814250712286566795565D-02,
     -    0.900159016553027132176880468561012909D-02,
     -    0.106638550579125138361942919452735325D-01,
     -    0.111846593099126430387073407118833354D-01,
     -    0.385799496980023805367420888821416195D-02,
     -    0.758360139997324780131852581815215690D-03,
     -    0.515879942948349487470209523786520153D-02,
     -    0.480156994900908384312585539888418911D-02,
     -    0.408196565634906464468248991864595651D-02,
     -    0.792823093491459671834249487634058797D-03,
     -    0.232382609301431692125131482167490615D-02,
     -    0.247922740121788676297790989873111605D-02,
     -    0.121386090850615000254478760135328238D-02,
     -    0.242625053112470346045284632424326025D-02,
     -    0.133273748004144318786858547420480468D-02,
     -    0.109961138698677264682159062534211885D-02,
     -    0.242337282906163288837294607289472072D-02,
     -    0.320232219185421571316988962746553904D-02,
     -    0.258617783928445224413166911789530271D-02,
     -    0.992730428784629160520030427582350684D-02,
     -    0.490421030619949795246079688232745000D-03,
     -    0.288696823980923151242849559676290910D-02,
     -    0.585722578750103054312122862162952458D-02,
     -    0.369975868119637159033062317794777296D-02,
     -    0.404838747416556770620791384380263519D-03,
     -    0.924802448180482616437236345777021896D-03,
     -    0.164393032717799689461299397300536321D-02,
     -    0.475339066514016304710886003158919212D-02,
     -    0.487600663622378642936223727336528464D-02,
     -    0.683132790831893268686300026620530316D-02,
     -    0.808758279181652636604822204174219027D-02,
     -    0.292548857365210188340309377920967147D-02,
     -    0.916190329755266257486697432746679287D-02,
     -    0.462767914185074184709850634269060142D-03,
     -    0.231121274058736952465242077638189645D-02,
     -    0.859352708265589917573377165722339864D-02,
     -    0.757355477793819932307141467029888431D-02,
     -    0.143934031372083738051177209777125681D-01,
     -    0.790159519912705895745483774867162352D-02,
     -    0.139599749720396695162985518772522759D-01,
     -    0.331537795061250330369454663943973589D-02,
     -    0.569311668410088571430994104144006244D-02,
     -    0.110016217778387969579160722984260030D-01,
     -    0.145974409566223238625976091857242353D-01,
     -    0.326753681754780190194339366227553287D-02,
     -    0.308275615037698812663223143166608949D-02,
     -    0.758733404532890299812741139190861612D-02,
     -    0.289840279746424282443270259279937568D-02,
     -    0.600307695023138511991487847607804410D-03,
     -    0.648177248666457193915482980215426011D-03,
     -    0.194561915113874408638270069948032236D-02,
     -    0.905297569508205446984092437965479534D-02,
     -    0.351804823463967648464647424734169938D-02,
     -    0.120814913828116956491927549527299347D-01,
     -    0.118760644663968080408697429662772848D-01,
     -    0.695156107872027397378185407850586990D-02,
     -    0.530475283936207487564994391138098386D-02,
     -    0.906835558105218313882666849096927483D-02,
     -    0.915766129408264291889950070729155351D-02,
     -    0.667609582538699432470079864740519593D-02,
     -    0.321875188986370112442428271231702691D-02,
     -    0.715697913096665880697590073627629401D-02,
     -    0.584785443859766675708178191809825145D-02,
     -    0.113744989822507916653176133736965238D-01,
     -    0.936302223214444653228971692922202294D-02,
     -    0.601823564782907060226907048372554492D-03,
     -    0.665545971271199057393244228113161034D-02,
     -    0.739697984382615841131260260808742995D-02,
     -    0.773331398720273901786545092526961577D-02,
     -    0.121036007725279552014255140348661542D-01,
     -    0.145367145519272814763310015682661182D-01,
     -    0.126782573859231836583509468347262697D-01,
     -    0.143726316837761267618539225650710523D-01,
     -    0.113592467402073333777402053787329527D-01,
     -    0.155677524224334573452400867148740726D-01,
     -    0.145531561075974264025199598418376094D-01 /
c
        external funuser
c
c       Construct an affine mapping take the standard simplex
c       to the user-specified triangle.
c
        b11 = verts(1,2)-verts(1,1)
        b12 = verts(1,3)-verts(1,1)
        b21 = verts(2,2)-verts(2,1)
        b22 = verts(2,3)-verts(2,1)
        b13 = verts(1,1)
        b23 = verts(2,1)
c
        det = abs(b11*b22-b12*b21)
c
        sum=0
        do 1100 i=1,nquad        
        x=b11*xs(i)+b12*ys(i)+b13
        y=b21*xs(i)+b22*ys(i)+b23
        wht=whts(i)*det
        call funuser(x,y,par1,par2,par3,par4,par5,par6,par7,par8,val)
        sum=sum+val*wht
 1100 continue
c
        end




        subroutine cadaptri2(ier,eps,verts,funuser,par1,par2,par3,par4,
     1    par5,par6,par7,par8,maxquad,nquad,xs,ys,whts)
        implicit double precision (a-h,o-z)
        dimension verts(2,3),stack(9,10 000)
        dimension xs(1),ys(1),whts(1)
        double complex val,val0,ima,val1,val2,val3,val4
        data ima / (0.0d0,1.0d0) /
        external funuser
c
c       Adaptively integrate a function supplied by the user via an 
c       external subroutine over a specified triangle.  
c
c       This subroutine uses a 60 point quadrature which integrates
c       16th order polynomials on the simplex.  It is accurate to
c       approximately 30 digits.
c
c                           Input Parameters:
c
c   eps - precision for the routine
c   verts - a (2,3) array each column of which supplies the coordinates
c       of one vertex of the triangle which constitutes the integration
c       domain
c
c   maxquad - the maximum number of quadrature nodes which the
c       user-specified arrays xs,ys and whts can accomodate
c
c   funuser - user-supplied external subroutine with calling syntax
c
c       subroutine funuser(x,y,par1,par2,par3,par4,val)
c
c       Return the value of the function to integrate at the point
c       (x,y) in the parameter val.
c
c   par? - arbitrarily-typed user-supplied parameters
c
c                          Output Parameters:
c
c   nquad - the number of nodes in the adaptive quadrature
c   (xs,ys) - the nodes of the quadrature
c   whts - the weights of the quadrature
c
c   ier - an error return code;
c       ier = 0    indicates success
c       ier = 4    means that stack was exhausted before convergence 
c                  was ovtained
c       ier = 16   means that the maximum recursion depth was exceeded
c                  before convergence was obtained
c
c   val - value of the integral
c   nquad - total number of quadrature nodes necessary to obtain the
c       specified accuracy
c
        ier   = 0
        val   = 0
        nquad = 0
c
c       Set algorithm parameters.
c
        maxstack = 10 000
        maxdepth = 150
c
c       Initialize the stack.
c
        istack=1
c
        x1 = verts(1,1)
        y1 = verts(2,1)
        x2 = verts(1,2)
        y2 = verts(2,2)
        x3 = verts(1,3)
        y3 = verts(2,3)
c
        stack(1,1)=x1
        stack(2,1)=y1
        stack(3,1)=x2
        stack(4,1)=y2
        stack(5,1)=x3
        stack(6,1)=y3
        stack(7,istack)=0
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val0)
        stack(8,istack)=real(val0)
        stack(9,istack)=imag(val0)
c
 1000 continue
c
c       Pop an entry off the stack.
c
        if (istack .eq. 0) goto 2000
c
        x1 = stack(1,istack)
        y1 = stack(2,istack)
        x2 = stack(3,istack)
        y2 = stack(4,istack)
        x3 = stack(5,istack)
        y3 = stack(6,istack)
c
        idepth0 = stack(7,istack)
        val0    = stack(8,istack)+ima*stack(9,istack)
        istack=istack-1
c
        if (idepth0 .gt. maxdepth) then
        ier=16
        return
        endif
c
c       Subdivide the triangle.
c
        u1 = (x1+x2)/2
        v1 = (y1+y2)/2
        u2 = (x1+x3)/2
        v2 = (y1+y3)/2
        u3 = (x2+x3)/2
        v3 = (y2+y3)/2
c
        if (istack+4 .gt. maxstack) then
        ier=4
        return
        endif
c
        istack=istack+1
        stack(1,istack)=x1
        stack(2,istack)=y1
        stack(3,istack)=u1
        stack(4,istack)=v1
        stack(5,istack)=u2
        stack(6,istack)=v2
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val1)
c
        stack(8,istack)=real(val1)
        stack(9,istack)=imag(val1)
c
        istack=istack+1
        stack(1,istack)=u1
        stack(2,istack)=v1
        stack(3,istack)=u2
        stack(4,istack)=v2
        stack(5,istack)=u3
        stack(6,istack)=v3
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val2)
c
        stack(8,istack)=real(val2)
        stack(9,istack)=imag(val2)
c
        istack=istack+1
        stack(1,istack)=u1
        stack(2,istack)=v1
        stack(3,istack)=x2
        stack(4,istack)=y2
        stack(5,istack)=u3
        stack(6,istack)=v3
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val3)
c
        stack(8,istack)=real(val3)
        stack(9,istack)=imag(val3)
c
        istack=istack+1
        stack(1,istack)=u2
        stack(2,istack)=v2
        stack(3,istack)=x3
        stack(4,istack)=y3
        stack(5,istack)=u3
        stack(6,istack)=v3
        stack(7,istack)=idepth0+1
        call cadaptri_oneint(stack(1,istack),funuser,par1,par2,par3,
     -    par4,par5,par6,par7,par8,val4)
c
        stack(8,istack)=real(val4)
        stack(9,istack)=imag(val4)
c
        errmax = abs(val1+val2+val3+val4-val0)
c        
 1100 continue
c
c       Accept the parent triangle.
c
        if (errmax .lt. eps) then
c
        if (nquad+82 .gt. maxquad) then
        ier = 1024
        return
        endif
c
        call cadaptri2_onetri(x1,y1,x2,y2,x3,y3,xs(nquad+1),
     -   ys(nquad+1),whts(nquad+1))
        nquad=nquad+82
c        
        istack=istack-4
        endif
c
        goto 1000
 2000 continue
        end
c
c
c
        subroutine cadaptri2_onetri(x1,y1,x2,y2,x3,y3,xs0,ys0,whts0)
        implicit double precision (a-h,o-z)
        dimension xs0(1),ys0(1),whts0(1)
c
        parameter ( nquad  =  82 , norder =  20)
        dimension xs( 82)
        dimension ys( 82)
        dimension whts( 82)
        data xs / 
     -    0.599606254286902014109006057460420108D+00,
     -    0.194361431608043340268349328753621816D-01,
     -    0.241494180881714895456504665896244100D+00,
     -    0.105509674807245944676658135392812692D+00,
     -    0.616055824663626995034887770249250644D-02,
     -    0.464919870130005077700842299832589593D-01,
     -    0.304200429423964880673975450567876394D+00,
     -    0.583539419677400034344922795152024729D+00,
     -    0.175270214114002368468762357805489194D+00,
     -    0.598301244328762033762286773546545691D+00,
     -    0.166965679734103225011556409365210418D+00,
     -    0.889166641175858205338161795170443806D+00,
     -    0.755863367197887113861132247564378201D-01,
     -    0.295264632916368315962285935928740971D-01,
     -    0.256888715492714935813229448133238334D-01,
     -    0.107074199802325561771243809493934968D+00,
     -    0.549062540336734650920299503296574530D-01,
     -    0.920149373366625529768067392435410463D+00,
     -    0.201946666558915812782665919173465169D-02,
     -    0.778040596575308641325987844081927358D+00,
     -    0.244800385519035441406502379722475741D+00,
     -    0.883518790025362975895709357978630189D+00,
     -    0.689049518913119026641472757441696058D-02,
     -    0.371361300475613755221503219149097066D+00,
     -    0.918971376905630671473266495113308531D+00,
     -    0.981666418328583582563905133390323568D-01,
     -    0.221979496938003647108180997031780848D-02,
     -    0.222711270544954412539119333211675904D-01,
     -    0.347613970652109371719736681742365287D-01,
     -    0.112170883522039017722165322362894684D-01,
     -    0.234784127644583398189195859923900450D-01,
     -    0.949564842458820098459969438578239178D-03,
     -    0.960158278274404707736460527560270547D-01,
     -    0.814128691695641782794660791924700011D+00,
     -    0.828064016989716198721254147763142082D+00,
     -    0.419484246902258813258366631542961097D-01,
     -    0.544882920269563083968098834369289140D-01,
     -    0.824689207333774148899588242873822903D-02,
     -    0.104033014516939923924853366950682230D+00,
     -    0.972983702139908917115857088461480568D+00,
     -    0.664432078440786655469633668788006996D-02,
     -    0.899789627478252441053953757247021805D-01,
     -    0.386240505789938313063439442612861920D+00,
     -    0.322888511686564386223573674100287206D+00,
     -    0.415046110493545954501464973838089405D+00,
     -    0.216044708523946076434291733787020999D+00,
     -    0.511004305067262966553686621080370891D+00,
     -    0.665353765561377659082315362369084896D-01,
     -    0.578587620304571958769192311237392943D+00,
     -    0.463342607045196117401383463312834265D+00,
     -    0.651799224970254504110336808720337570D+00,
     -    0.617032001973026269673445638841257729D+00,
     -    0.556943132502515425080187206976310713D+00,
     -    0.195919045804594926235373898666885154D+00,
     -    0.164405131051815576406503521719098033D-01,
     -    0.464176573225095527057592116048231138D-02,
     -    0.759524858064799218110120059010316207D+00,
     -    0.726362435436986650118324226386642268D+00,
     -    0.322118235017598678724560446291703289D+00,
     -    0.445182839046954605878580016412644353D+00,
     -    0.123882678015329113812832110156345145D+00,
     -    0.697834066279718867421958894765572399D+00,
     -    0.127023396474346065188903741267591642D+00,
     -    0.718424844780529689652975879516799292D+00,
     -    0.161361926482163036281137841995082847D+00,
     -    0.272502731185176935181405853847768918D+00,
     -    0.468362831926967476927009451773859465D+00,
     -    0.473150257223928440406970902117165149D-01,
     -    0.836800892341130580851642520697442044D+00,
     -    0.121058861284957150257569482125406357D+00,
     -    0.178967763622164066155815440796739068D+00,
     -    0.975768978323607300548321269209258902D+00,
     -    0.682892491046321208530596541259857125D+00,
     -    0.242288416685756862302201013292390492D+00,
     -    0.529896775875208249057459716196417768D+00,
     -    0.431016621433818874634506956062581142D+00,
     -    0.461615405150816451748591656678411982D+00,
     -    0.205333529488513877575038520865148198D+00,
     -    0.219147685021828581752734597261080584D+00,
     -    0.305416068178868934753979849473602536D+00,
     -    0.336017662662626571437617267625200890D+00,
     -    0.328151194781557038836205590227649413D+00 /
        data ys / 
     -    0.246987250173183251591138139477247798D+00,
     -    0.637312973821099579220227582131754075D-01,
     -    0.165142890700120745426508545494047232D+00,
     -    0.848376935259422925694101036268539135D+00,
     -    0.101965125100204735479076289038317096D+00,
     -    0.285983198603166177522138931021523206D-01,
     -    0.109413117368647462527320845763732087D+00,
     -    0.307134366751819408990200650541040621D+00,
     -    0.235355336844576831438451586070641493D+00,
     -    0.185297548180086285061054262292805064D+00,
     -    0.811213746960471744921999120531002408D+00,
     -    0.110670986160045981069582851593283731D+00,
     -    0.828345313458428657922598508890632567D+00,
     -    0.810351065753387201376519827689730295D+00,
     -    0.167058285442311206408901321167058032D+00,
     -    0.892587772725211605200297350607319113D+00,
     -    0.925454999013020201784097793639897818D+00,
     -    0.597014897218390946418003468191696236D-01,
     -    0.219163859881526873713206099082357486D+00,
     -    0.213763671275583299231053887420053619D+00,
     -    0.753150431116658616132792091161023253D+00,
     -    0.321115199393785175243630896076941395D-02,
     -    0.346758451205152397308745212355778136D+00,
     -    0.619218741371277740367491011530752235D+00,
     -    0.221900019516216029395412399844223823D-01,
     -    0.320153160816791631616085315394201456D+00,
     -    0.968370945816610677856085378858127161D+00,
     -    0.912440100995654365612943104784970207D+00,
     -    0.276556378666680441105612696672019590D+00,
     -    0.613580172297473706583535588190947352D+00,
     -    0.570081194742925987853925431231622644D-03,
     -    0.874501329112400145894361691390429597D+00,
     -    0.735992786725095788055450857159245106D-02,
     -    0.299444377973357339824377031573824829D-01,
     -    0.137802553310600277203899176441726133D+00,
     -    0.413070925307972707763998082902346306D+00,
     -    0.537091092433573993197436123975467876D+00,
     -    0.483198266004187310146441724285615637D+00,
     -    0.716399477326731899606833847556852893D+00,
     -    0.225628395805686103220967260488490456D-02,
     -    0.745026931602766088487283811608741602D+00,
     -    0.194076217743391325103738992138667124D+00,
     -    0.470058532078494498557486568796098284D-01,
     -    0.217891649100615843324144309464199784D+00,
     -    0.536016253972298658990994808074045452D+00,
     -    0.328853733036855950951573157379383997D+00,
     -    0.480043144437644044526640668896520242D+00,
     -    0.978471605387780727936819066192683246D-01,
     -    0.104949514941569796291171105869198093D+00,
     -    0.319332189203961982050852138653107741D+00,
     -    0.338706364028602912351769567095295020D+00,
     -    0.828052061183471008386243342749602213D-02,
     -    0.395348230414984582875012957356595706D+00,
     -    0.992505831376731943699660034899233491D-02,
     -    0.977751230467919281203921331514757260D+00,
     -    0.215123967692872100140058303704414848D-01,
     -    0.496803434405404947011297114964753274D-02,
     -    0.168713665705801034116930996608111115D+00,
     -    0.101025321565154691966832441423959986D-01,
     -    0.434128994075065783661137425691943462D+00,
     -    0.433859977930181487648663514618569764D+00,
     -    0.254795840077101198347848937745977028D+00,
     -    0.463701673755473508426021906786865280D-01,
     -    0.951388904341828422176806244828418685D-01,
     -    0.118111308450451495262621877259131412D+00,
     -    0.689174710872979420268772875156925305D+00,
     -    0.818453211675707958327895639337370961D-02,
     -    0.680430239926720088293259434670641818D+00,
     -    0.763887204880219517254252694653643608D-01,
     -    0.577277027177800601329890945992461294D+00,
     -    0.726962632595002744662831667159526419D+00,
     -    0.192435377093286902406842067822604071D-01,
     -    0.387799579209672310960022906050334021D-01,
     -    0.523072289000852730444121576035645264D-01,
     -    0.450105276132100864489385958772913264D-01,
     -    0.118080243442109657443524048151520650D+00,
     -    0.209061172173192141144067286297244125D+00,
     -    0.600559998438305989916338402107515999D+00,
     -    0.461672327465312156951288656844981738D+00,
     -    0.586078739311138216495010329907431162D+00,
     -    0.333593303633145814670511687166144857D+00,
     -    0.462078429713072100173704636848334120D+00 /
        data whts /
     -    0.524495548583970863143784235992340113D-02,
     -    0.164811091334793458733876571477532741D-02,
     -    0.728860453034198792713590629202168135D-02,
     -    0.339588878203591086832605977057112252D-02,
     -    0.129261249661162283851644640012514470D-02,
     -    0.249171990301011677839584142895364983D-02,
     -    0.873737709104630814250712286566795565D-02,
     -    0.900159016553027132176880468561012909D-02,
     -    0.106638550579125138361942919452735325D-01,
     -    0.111846593099126430387073407118833354D-01,
     -    0.385799496980023805367420888821416195D-02,
     -    0.758360139997324780131852581815215690D-03,
     -    0.515879942948349487470209523786520153D-02,
     -    0.480156994900908384312585539888418911D-02,
     -    0.408196565634906464468248991864595651D-02,
     -    0.792823093491459671834249487634058797D-03,
     -    0.232382609301431692125131482167490615D-02,
     -    0.247922740121788676297790989873111605D-02,
     -    0.121386090850615000254478760135328238D-02,
     -    0.242625053112470346045284632424326025D-02,
     -    0.133273748004144318786858547420480468D-02,
     -    0.109961138698677264682159062534211885D-02,
     -    0.242337282906163288837294607289472072D-02,
     -    0.320232219185421571316988962746553904D-02,
     -    0.258617783928445224413166911789530271D-02,
     -    0.992730428784629160520030427582350684D-02,
     -    0.490421030619949795246079688232745000D-03,
     -    0.288696823980923151242849559676290910D-02,
     -    0.585722578750103054312122862162952458D-02,
     -    0.369975868119637159033062317794777296D-02,
     -    0.404838747416556770620791384380263519D-03,
     -    0.924802448180482616437236345777021896D-03,
     -    0.164393032717799689461299397300536321D-02,
     -    0.475339066514016304710886003158919212D-02,
     -    0.487600663622378642936223727336528464D-02,
     -    0.683132790831893268686300026620530316D-02,
     -    0.808758279181652636604822204174219027D-02,
     -    0.292548857365210188340309377920967147D-02,
     -    0.916190329755266257486697432746679287D-02,
     -    0.462767914185074184709850634269060142D-03,
     -    0.231121274058736952465242077638189645D-02,
     -    0.859352708265589917573377165722339864D-02,
     -    0.757355477793819932307141467029888431D-02,
     -    0.143934031372083738051177209777125681D-01,
     -    0.790159519912705895745483774867162352D-02,
     -    0.139599749720396695162985518772522759D-01,
     -    0.331537795061250330369454663943973589D-02,
     -    0.569311668410088571430994104144006244D-02,
     -    0.110016217778387969579160722984260030D-01,
     -    0.145974409566223238625976091857242353D-01,
     -    0.326753681754780190194339366227553287D-02,
     -    0.308275615037698812663223143166608949D-02,
     -    0.758733404532890299812741139190861612D-02,
     -    0.289840279746424282443270259279937568D-02,
     -    0.600307695023138511991487847607804410D-03,
     -    0.648177248666457193915482980215426011D-03,
     -    0.194561915113874408638270069948032236D-02,
     -    0.905297569508205446984092437965479534D-02,
     -    0.351804823463967648464647424734169938D-02,
     -    0.120814913828116956491927549527299347D-01,
     -    0.118760644663968080408697429662772848D-01,
     -    0.695156107872027397378185407850586990D-02,
     -    0.530475283936207487564994391138098386D-02,
     -    0.906835558105218313882666849096927483D-02,
     -    0.915766129408264291889950070729155351D-02,
     -    0.667609582538699432470079864740519593D-02,
     -    0.321875188986370112442428271231702691D-02,
     -    0.715697913096665880697590073627629401D-02,
     -    0.584785443859766675708178191809825145D-02,
     -    0.113744989822507916653176133736965238D-01,
     -    0.936302223214444653228971692922202294D-02,
     -    0.601823564782907060226907048372554492D-03,
     -    0.665545971271199057393244228113161034D-02,
     -    0.739697984382615841131260260808742995D-02,
     -    0.773331398720273901786545092526961577D-02,
     -    0.121036007725279552014255140348661542D-01,
     -    0.145367145519272814763310015682661182D-01,
     -    0.126782573859231836583509468347262697D-01,
     -    0.143726316837761267618539225650710523D-01,
     -    0.113592467402073333777402053787329527D-01,
     -    0.155677524224334573452400867148740726D-01,
     -    0.145531561075974264025199598418376094D-01 /
c
        external funuser
c
c       Construct an affine mapping take the standard simplex
c       to the user-specified triangle.
c
        b11 = x2-x1
        b12 = x3-x1
        b21 = y2-y1
        b22 = y3-y1
        b13 = x1
        b23 = y1
c
        det = abs(b11*b22-b12*b21)
c
        do 1100 i=1,nquad        
        x=b11*xs(i)+b12*ys(i)+b13
        y=b21*xs(i)+b22*ys(i)+b23
        wht=whts(i)*det
        xs0(i)   = x
        ys0(i)   = y
        whts0(i) = wht
 1100 continue
c
        end
